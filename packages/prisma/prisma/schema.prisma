// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DataMigration {
  name        String   @id
  performedAt DateTime @default(now()) @map("created_at")

  @@map("_data_migrations")
}

model Role {
  name        String       @id
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  permissions Permission[]
  profile     Profile[]

  @@map("roles")
}

model Permission {
  id        String   @id @default(uuid())
  name      String
  Role      Role     @relation(fields: [roleName], references: [name])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  roleName  String   @map("role_name")

  @@map("permissions")
}

// model User {
//   id               String   @id @default(uuid())
//   email            String   @unique()
//   password         String?
//   salt             String?
//   Role             Role?    @relation(fields: [roleName], references: [name])
//   createdAt        DateTime @default(now()) @map("created_at")
//   updatedAt        DateTime @updatedAt @map("updated_at")
//   roleName         String   @map("role_name")
//   isEmailConfirmed Boolean  @default(false) @map("is_email_confirmed")

//   @@map("users")
// }

model Profile {
  id          String       @id @default(uuid())
  roleName    String       @map("role_name")
  role        Role         @relation(fields: [roleName], references: [name])
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  authMethods AuthMethod[]

  @@map("profiles")
}

model AuthMethod {
  id          String     @id @default(uuid())
  profileId   String     @map("profile_id")
  isConfirmed Boolean    @default(false) @map("is_confirmed")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  profile     Profile    @relation(fields: [profileId], references: [id])
  localAuth   LocalAuth?
}

model LocalAuth {
  id           String     @id @default(uuid())
  email        String     @unique()
  password     String?
  salt         String?
  authMethodId String     @unique @map("auth_method_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  authMethod   AuthMethod @relation(fields: [authMethodId], references: [id])
}
